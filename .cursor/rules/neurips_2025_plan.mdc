---
description: Persistent tasks and guidelines for writing the extended abstract, developing an LCT layer, benchmarking NanoGPT, and maintaining AGENT.md.
globs: 
alwaysApply: true
---
## Deliverables & Checklists

### 1Ô∏è‚É£ Extended Abstract (‚â•2 pages, ‚â§4 pages)
- [ ] Conform to NeurIPS 2025 **style & formatting** (double-column, 10-pt font).  
  Reference: <https://neurips.cc/Conferences/2025/Submission>
- [ ] Clear statement of problem & contribution.  
  *Hint*: "We propose replacing Fourier-based linear layers with an adaptive LCT layer parameterised by \(a,b,c\) that strictly generalises the DFT."
- [ ] Include empirical table comparing NanoGPT + LCT vs baseline.
- [ ] Release **source \+ compiled PDF** in `paper/`.

### 2Ô∏è‚É£ LCT Layer
- [ ] Implement `class LCTLayer(nn.Module)` with learnable `a, b, c` (real scalars) and analytical inverse.
- [ ] JIT-friendly & GPU-compatible (support bf16 & fp8 where available).
- [ ] Unit tests validating:  
  * (i) reduces to FFT when \(a=0,b=1,c=0\)  
  * (ii) inverse reconstruction loss < 1e-6.
  * (iii) special-case coverage (Laplace, Fourier, fractional variants, Fresnel; check unitarity & reference matrices).
- [ ] TorchScript export passes.

### 3Ô∏è‚É£ Benchmark
- [ ] Provision target machine via `run.sh` or Justfile recipe.
- [ ] Compare tokens/sec of baseline vs LCT-augmented model.
- [ ] Log wandb run URLs in `records/`.

### 4Ô∏è‚É£ Agent Plan (`AGENT.md`)
- [ ] Keep chronological log of thoughts, decisions, and next actions.  Prefer checklist style.
- [ ] Each atomic change ‚áí *one git commit* (`git add -p` + signed commit).
- [ ] Update `CHANGELOG.md` with semver bumps.

---

## Development Conventions

* Use **`uv`** for Python dependencies; no `pip`/`conda`.
* Linters: `ruff`, `mypy`, `black` ‚Äì configured in `pyproject.toml`.
* Prefer **functional style** & small composable units.
* Plot intermediates with **Plotly**.
* All code ‚â• Python 3.12.

---

## Automation Hooks

Whenever the same shell command is executed ‚â•3 times, propose a **Justfile** target.  Store common one-liners in `.just-cache/`.

---

## Common Pitfalls

| Pitfall | Fix |
|---------|-----|
| Forgetting to bump version in `pyproject.toml` after API change | `just version:bump` |
| Committing large notebooks | Avoid ‚Äì use VSCode `# %%` files |
| Missing CHANGELOG entry | Add under `## [Unreleased]` |

---

## Immediate Next Actions (sync `@AGENT.md`)

| Priority | Task | When |
| -------- | ---- | ---- |
| üî• | Build repo skeleton & smoke-test MVP `LCTLayer` | Today |
| üî• | Draft abstract outline (`paper/outline.md`) | Today |
| üî• | Wire into NanoGPT `--use-lct` flag | Today |
| üÜï | Oracle tests (Fourier, Laplace) | Today |
| üÜï | Quick benchmark script `just bench:lct` | Today |
| ‚ö†Ô∏è | Update results table & abstract numbers | Today |
| ‚ÑπÔ∏è | Tag preview `v0.0.1` | Today |

---

## Milestones (high-level check-points)

1. **LCT Minimum Viable Layer** ‚Äì code complete & passes unit tests.
2. **Integration** ‚Äì NanoGPT runs with `--use-lct` replacing `nn.Linear`.
3. **Benchmark** ‚Äì tokens/s baseline vs LCT plotted; results saved in `img/`.
4. **Special-Case Compliance** ‚Äì Laplace, Fresnel, FrFT, unitarity tests green.
5. **Paper** ‚Äì Extended abstract PDF passes NeurIPS style checker.
6. **Submission Package** ‚Äì Tagged release `v0.1.0` with Zenodo DOI.

---

## Reference Implementation Guide

For full technical details (repository skeleton, algorithmic breakdown, caching strategy, CI matrix, ablation list, etc.) consult [AGENT.md](mdc:AGENT.md).

---


